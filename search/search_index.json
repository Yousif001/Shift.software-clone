{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Philosophy/characteristics/","title":"Characteristics","text":"<p>We take a great care of the quality of software we make.  Whenever we build a software system, we ensure below high level characteristics:</p>"},{"location":"Philosophy/characteristics/#documentation-ease-of-use","title":"Documentation &amp; Ease of Use","text":"<p>This will ensure that new developers and existing developers can create high quality new applications and  safely make changes to existing applications.</p>"},{"location":"Philosophy/characteristics/#testability","title":"Testability","text":"<p>Automated Testing, Guidelines &amp; Tools for testing are provided to enforce continuous testing.  This ensures reliability since applications are automatically tested before each deployment.</p>"},{"location":"Philosophy/characteristics/#continuous-delivery","title":"Continuous Delivery","text":"<p>We ensure that our Software are always in a releasable state and that Delivery Pipelines are configured as part of the CI/CD process.</p>"},{"location":"Philosophy/characteristics/#lightweight-minimal","title":"Lightweight &amp; Minimal","text":"<p>While building software, we work really hard on reducing accidental complexity as much as possible.</p>"},{"location":"Philosophy/characteristics/#modularity","title":"Modularity","text":"<p>We breakdown Software Systems into multiple stand-alone Modules/Components. These modules are developed,  and maintained in isolation, Sometimes as code libraries or packages on (NuGet, npm ...etc).  This will ensure that the System can evolve easily and that different teams can work on different modules.</p>"},{"location":"Philosophy/philosophy/","title":"Philosophy","text":""},{"location":"Philosophy/philosophy/#engineering","title":"Engineering","text":"<p>Software Engineering is about problem-solving and a lot of creativity is involved in that.  We place Engineering at the heart of the company and we're striving for an engineering-first culture.</p>"},{"location":"Philosophy/philosophy/#craftsmanship","title":"Craftsmanship","text":"<p>We build custom software that are tailored for clients' needs. We believe in craftsmanship and spend countless hours perfecting very small details.</p>"},{"location":"about/Developers/","title":"Developers","text":"<p>\"A company's biggest and most valuable assets are the people itself. Without the people, there is no company.\"</p>"},{"location":"about/Developers/#onboarding-strategy","title":"Onboarding Strategy","text":"<p>We're applying a very forward thinking strategy when it comes to onboarding new developers.  It goes as follows: </p> <ul> <li> <p>We're very flexible, patient, and open with developers.  They're given a lot of opportunities, space and comfort.</p> </li> <li> <p>Newly onboarded developers are offered a playground to learn and grow at their own pace.  They're isolated from real responsibilities that might backfire on them in case they</p> </li> <li> <p>Most of the time, a minimum fixed salary is offered to provide peace of mind and security, </p> </li> <li>but the maximum salary (which is in the from bonuses and shares of contracts/projects) is not fixed/limited.</li> </ul>"},{"location":"about/Developers/#expectations","title":"Expectations","text":"<p>Considering the above points, and the fact that we're not rapidly hiring and firing developers,  the following are expected from our developers:</p> <ul> <li>Grow and Develop steadily.</li> <li>Pick up responsibilities: unlike freelancers and newly onboarded developers,  senior developers should know the business inside out,  and they should be able to take necessary actions to move projects forward without much supervision.  The longer they stay in the company, the more they're held accountable.</li> <li>Apply engineering principles and adhere to company values. As listed on our   Code of Conduct</li> <li>Avoid mistakes and failure at all cost: mistakes are inevitable, </li> <li>and can't be avoided, but they should be addressed before making their way to the final products/services.</li> </ul>"},{"location":"about/Developers/#termination","title":"Termination","text":"<p>A work agreement with a developer is partially or completely terminated if one or more of the following is violated:</p> <ul> <li> <p>Irresponsibility: When a senior developer is unable to pick up responsibility after a long time  (or they still need complete supervision similar to freelancers or newly onboarded developers).</p> </li> <li> <p>Noncompliance: the developer is not adhering to or rejecting the company's principles and values.</p> </li> <li> <p>Constantly failing: the developer constantly delivers failed products/services to end-users due to irresponsibility and noncompliance.</p> </li> </ul> <p>Note</p> <p>A product/service is considered as failed IF and ONLY IF the product/service is considered as completely developed/built  and launched (delivered) to the end-users, and the problems/shortcomings are discovered after the delivery.</p>"},{"location":"about/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"about/code-of-conduct/#engineering-scientific-principles","title":"Engineering &amp; Scientific Principles","text":"<p>We are an engineering firm, thus everything we do is planned elaborately,  anticipated, thought of ahead of time, and when the unexpected happens,  we have a contingency plan to apply. Anticipating problems ahead of time is a difficult task that might seem impossible,  but this becomes achievable by following engineering and scientific principles.</p>"},{"location":"about/code-of-conduct/#quality-reliability-and-maintainability","title":"Quality, Reliability and Maintainability","text":"<p>We do not deliver unfinished work. Everything we do is 100% completed, otherwise the work is be marked as \"Incomplete\",  and it stays open for work with a high level of priority until completed. When we have to wait for an external input,  we simulate and anticipate this part, then we will replace it with the actual external input, instead of waiting and blocking the project.  We aim to underpromise and overdeliver, but If necessary,  we Slow Down, Stop, or even Go Backwards but never deliver incomplete products/services to our clients/customers.</p>"},{"location":"about/code-of-conduct/#project-execution","title":"Project Execution","text":"<p>We listen to our clients' and customers' requirements, opinions, goals, hopes, vision, and dreams about the software we're building.  We extend this by conducting extensive research on the project on hand. However,  we take the responsibility and we are the decision makers when it comes to the techniques, methods, timelines,  and feasibility of the project implementation and execution.  All of which are completely transparent and clearly communicated with the client/customer.  We don't accept intervention from clients/customers unless a mutual technical agreement is in place.</p>"},{"location":"about/code-of-conduct/#transparency","title":"Transparency","text":"<p>All formal communications are logged and accessible by relevant parties.  Anything we execute corresponds to a well documented and transparent set of instructions and requirements that's communicated with clients/customers or/and internally between our team members.  The work progress, issues, and resolutions are also documented in a transparent manner.  Other forms of communication like physical or virtual meetings or phone calls are also be documented as a (Minutes of Meeting) document,  and it is accessible to all relevant parties. and it is accessible to all relevant parties.</p>"},{"location":"about/strategy-and-vision/","title":"Strategy &amp; Vision","text":""},{"location":"about/strategy-and-vision/#business-strategy","title":"Business Strategy","text":"<p>We're an engineering firm and the way we're doing business corresponds to engineering and scientific principles.</p> <p>We follow strict ethical standards while conducting business and we're staying away from relying on luck,  misleading marketing, politics, and all other unethical practices.</p> <p>Our clients and partners do business with us for being transparent, trustworthy, reliable and realistic.</p>"},{"location":"about/strategy-and-vision/#team-community","title":"Team &amp; Community","text":"<p>We aim to be an open organization. Open internally, with clients/customers, and open with the community.</p> <p>The openness nature of the company is a driver of growth and it's a testimony of our competence.</p> <p>We aim to place ourselves in a position where</p> <ul> <li> <p>Clients and investors seek our services for knowing that we'll execute their work in the best possible manner.</p> </li> <li> <p>Individuals and Other firms in our industry are willing to collaborate and get on board with us for knowing that  we'll take their interests into consideration in the best possible manner.</p> </li> </ul>"},{"location":"about/strategy-and-vision/#our-vision","title":"Our Vision","text":"<p>We started by developing and maintaining custom software and platforms for local enterprises and organizations</p> <ul> <li> <p>Our short-term goal is to provide tools, skilled labor,  and consultation to platform owners that will enable them to enhance and build upon their platforms with our help.</p> </li> <li> <p>Our long-term goal is to focus on building tools and frameworks for everyone without much intervention on the final product.</p> </li> <li> <p>And our Ultimate goal is to export our tools to people, businesses, and organizations outside our local market and country.</p> </li> </ul>"},{"location":"software-development/automated-testing/","title":"Automated Testing","text":"<p>In all cases, the developer tests the software as they're writing code.  This testing could be manual or automated.</p> <p>Manual testing is unreliable and not easily repeatable.  This is why we adopt Automated Testing from the inception of the software we're developing.</p> <p>Of course, the Automated Tests are not only useful for the developer's local development experience.  But it's also a crucial component of the Continuous Integration Pipeline.</p>"},{"location":"software-development/continuous-delivery/","title":"Continuous Delivery","text":"<p>Delivering (Releasing) a new version of software is a tedious and a repetitive task. Having an automated Continuous Delivery pipeline makes everyone's life much easier.</p>"},{"location":"software-development/continuous-delivery/#continuous-delivery-pipelines","title":"Continuous Delivery Pipelines","text":"<p>A Continuous Delivery Pipeline is a series of automated processes for delivering new software. This goes hand in hand and comes a step after Continuous Integration and  Automated Testing.</p> <p>An ideal scenario of the entire CI/CD process is as follows:</p> <ol> <li> <p>Developer pushes a commit to the main branch.</p> </li> <li> <p>The Continuous Integration prepares a build that's in a releasable state.</p> </li> <li> <p>Automated Testing is executed to validate the new build.</p> </li> <li> <p>The Continuous Delivery Pipeline releases the newly tested build.</p> </li> </ol>"},{"location":"software-development/continuous-delivery/#feature-toggles","title":"Feature Toggles","text":"<p>An obvious problem arises if developers continuously integrate their changes to the main branch. Most of the times the development of a feature takes a long time and can't be integrated until completed.</p> <p>This is when Feature Toggles come to rescue. Feature Toggles (or Feature Flags) is a powerful technique allowing teams to modify system behavior without changing code.  We use this to confidently push incomplete features to the main branch (And even release them).</p> <p>The incomplete features can be simply switched off using a Feature Toggle (Flag).</p>"},{"location":"software-development/continuous-delivery/#git-tags","title":"Git Tags","text":"<p>We do want to continuously integrate changes to the main branch and we do want the automated build and  testing process to be executed every time code is pushed to the main branch.</p> <p>But in most cases, it's unlikely that we want all the successful builds to be released with the Delivery Pipeline.</p> <p>To select a certain build to be released, we use Git Tags and mark a specific commit as the version  that should be released by the Continuous Delivery Pipeline.</p>"},{"location":"software-development/continuous-integration/","title":"Continuous Integration","text":"<p>We organize our entire work process and company culture to adapt for Continuous Integration. We'll not discuss our work culture here since it's explained in Tasks. But we'll focus on how we apply CI (Continuous Integration):</p> <ul> <li>We divide work into small batches, commit, and merge them to main branch. This is a method known as  Trunk Based Development.</li> <li>There are Build Pipelines in place that are triggered when code is merged to the main branch.</li> <li>The Build Pipeline executes all the Automated Tests available in the source code.  If the tests fail the developers are notified and the build pipeline is canceled.</li> <li>Developers are responsible for keeping the build process up and running. If a build fails,   fixing the problem becomes the most prioritized task.</li> <li>Developers make sure that the main production branch is always in a Releasable State to enable Continuous Delivery.</li> </ul>"},{"location":"software-development/tasks/","title":"Tasks","text":"<p>We use a centralized Collaboration tool.  And it's in our company's culture to make sure that all of our work is recorded and progressed in the task management system.</p> <p>We want our work to be organized, categorized, and accessible to all relevant parties.  Having a centralized collaboration tool solves below problems:</p> <ul> <li>Not everyone is able to attend all meetings or join all phone calls.</li> <li>Details discussed in meetings &amp; phone calls can be forgotten.</li> <li>Discussions in Chat Apps &amp; Emails might not be accessible by everyone needing them. Or they might be easily lost in long threads.</li> </ul> <p>Below is our strategy for organizing our work into tasks:</p>"},{"location":"software-development/tasks/#work-breakdown","title":"Work Breakdown","text":"<p>We breakdown any given work to the smallest possible unit of work.  The work units are organized into tasks and sub-tasks.</p> <p>We follow the below simple rule of thumb for knowing when to stop the breakdown:</p> <p>When to Stop</p> <p>Can the work be explained in a few short (and meaningful) English sentences?</p> <ul> <li>No: Then keep breaking down.</li> <li>Yes: The unit of work can be recorded as a task or sub-task</li> </ul>"},{"location":"software-development/tasks/#version-control-git","title":"Version Control (git)","text":"<p>Tasks are not only the smallest unit of work. When each task is completed, a commit is made in the Version Control.</p> <p>We follow the below simple guideline:</p> <ul> <li> <p>Every commit has a corresponding Task.</p> </li> <li> <p>A commit message consists of a Task ID, followed by a colon,  then followed by the task title. eg: <code>#301uqa7: Change date format to 'yyyy-MM-dd'</code></p> </li> </ul> <p>Continuous Integration</p> <p>The fact that work is broken down to the smallest possible unit and the one-to-one relation between a task and a commit,    forces every commit to also be very small.   This is naturally enabling the practice Continuous Integration</p>"},{"location":"software-development/tasks/#time-tracking","title":"Time Tracking","text":"<p>Most Collaboration tools, including the one we're using provide an easy way to track and record time.  We make it a habit to always start the timer on the Task at hand.</p>"},{"location":"software-development/tasks/#reporting","title":"Reporting","text":"<p>One more advantage of breaking down work in an organized manner and  giving them meaningful task titles is that work reports can be easily generated and shared with clients and stakeholders.</p>"}]}